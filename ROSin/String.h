/* Auto-generated by genmsg_cpp for file /opt/ros/fuerte/share/nlp_comms/srv/String.srv */
#ifndef NLP_COMMS_SERVICE_STRING_H
#define NLP_COMMS_SERVICE_STRING_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace nlp_comms
{
template <class ContainerAllocator>
struct StringRequest_ {
  typedef StringRequest_<ContainerAllocator> Type;

  StringRequest_()
  : in()
  {
  }

  StringRequest_(const ContainerAllocator& _alloc)
  : in(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _in_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  in;


  typedef boost::shared_ptr< ::nlp_comms::StringRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nlp_comms::StringRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StringRequest
typedef  ::nlp_comms::StringRequest_<std::allocator<void> > StringRequest;

typedef boost::shared_ptr< ::nlp_comms::StringRequest> StringRequestPtr;
typedef boost::shared_ptr< ::nlp_comms::StringRequest const> StringRequestConstPtr;


template <class ContainerAllocator>
struct StringResponse_ {
  typedef StringResponse_<ContainerAllocator> Type;

  StringResponse_()
  : out()
  {
  }

  StringResponse_(const ContainerAllocator& _alloc)
  : out(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _out_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  out;


  typedef boost::shared_ptr< ::nlp_comms::StringResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nlp_comms::StringResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StringResponse
typedef  ::nlp_comms::StringResponse_<std::allocator<void> > StringResponse;

typedef boost::shared_ptr< ::nlp_comms::StringResponse> StringResponsePtr;
typedef boost::shared_ptr< ::nlp_comms::StringResponse const> StringResponseConstPtr;

struct String
{

typedef StringRequest Request;
typedef StringResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct String
} // namespace nlp_comms

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nlp_comms::StringRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nlp_comms::StringRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nlp_comms::StringRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2718218ecd3037e7050a0e8416c50c33";
  }

  static const char* value(const  ::nlp_comms::StringRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2718218ecd3037e7ULL;
  static const uint64_t static_value2 = 0x050a0e8416c50c33ULL;
};

template<class ContainerAllocator>
struct DataType< ::nlp_comms::StringRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nlp_comms/StringRequest";
  }

  static const char* value(const  ::nlp_comms::StringRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nlp_comms::StringRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string in\n\
\n\
";
  }

  static const char* value(const  ::nlp_comms::StringRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nlp_comms::StringResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nlp_comms::StringResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nlp_comms::StringResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "da0977a72deba269ef1a5e91941513be";
  }

  static const char* value(const  ::nlp_comms::StringResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xda0977a72deba269ULL;
  static const uint64_t static_value2 = 0xef1a5e91941513beULL;
};

template<class ContainerAllocator>
struct DataType< ::nlp_comms::StringResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nlp_comms/StringResponse";
  }

  static const char* value(const  ::nlp_comms::StringResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nlp_comms::StringResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string out\n\
\n\
\n\
";
  }

  static const char* value(const  ::nlp_comms::StringResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nlp_comms::StringRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.in);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StringRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nlp_comms::StringResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.out);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StringResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<nlp_comms::String> {
  static const char* value() 
  {
    return "e21fb7853ad73d6d988d6371d4fed1e2";
  }

  static const char* value(const nlp_comms::String&) { return value(); } 
};

template<>
struct DataType<nlp_comms::String> {
  static const char* value() 
  {
    return "nlp_comms/String";
  }

  static const char* value(const nlp_comms::String&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<nlp_comms::StringRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e21fb7853ad73d6d988d6371d4fed1e2";
  }

  static const char* value(const nlp_comms::StringRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<nlp_comms::StringRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nlp_comms/String";
  }

  static const char* value(const nlp_comms::StringRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<nlp_comms::StringResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e21fb7853ad73d6d988d6371d4fed1e2";
  }

  static const char* value(const nlp_comms::StringResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<nlp_comms::StringResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nlp_comms/String";
  }

  static const char* value(const nlp_comms::StringResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // NLP_COMMS_SERVICE_STRING_H

